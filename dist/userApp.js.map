{"version":3,"sources":["../dist-es6/userApp.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","UserApp","userAppArgs","tokenSecret","process","env","PASSWORD_SALT","passwordSalt","userRepository","action","type","actions","SAVE","GET_AUTH_TOKEN","saveUser","args","getAuthToken","user","password","Error","passwordHash","undefined","userArgs","createdBy","authedUser","hashPassword","isValid","getOtherUsersWithSameUserNameOrEmail","otherUsers","otherUsersWithSameUserNameOrEmail","getById","id","userDb","update","save","find","query","limit","options","form","getByUserNameOrEmail","userNameOrEmail","isPasswordCorrect","authToken","errors","authUser","push","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","token","log","allUsers","ip","dtCreated","Date","displayName","email","userName","forEach"],"mappings":"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","file":"userApp.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { compare, hash } from 'bcryptjs';\nimport { decode, encode } from 'jwt-simple';\nimport { BaseApp } from 'ptz-core-app';\nimport { allErrors, AuthUserForm, User, users } from 'ptz-user-domain';\nexport default class UserApp extends BaseApp {\n    constructor(userAppArgs) {\n        super(userAppArgs);\n        this.tokenSecret = process.env.PASSWORD_SALT;\n        this.passwordSalt = process.env.PASSWORD_SALT;\n        this.userRepository = userAppArgs.userRepository;\n    }\n    execAction(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (action.type) {\n                case UserApp.actions.SAVE:\n                    return yield this.saveUser(action.args);\n                case UserApp.actions.GET_AUTH_TOKEN:\n                    return yield this.getAuthToken(action.args);\n            }\n        });\n    }\n    hashPassword(user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!user.password)\n                return Promise.resolve(user);\n            if (!this.passwordSalt)\n                throw new Error('passwordSalt not added to process.env.');\n            user.passwordHash = yield hash(user.password, this.passwordSalt);\n            user.password = undefined;\n            return Promise.resolve(user);\n        });\n    }\n    saveUser(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            args.userArgs.createdBy = args.authedUser;\n            var user = new User(args.userArgs);\n            user = yield this.hashPassword(user);\n            if (!user.isValid())\n                return Promise.resolve(user);\n            const otherUsers = yield this.userRepository.getOtherUsersWithSameUserNameOrEmail(user);\n            if (user.otherUsersWithSameUserNameOrEmail(otherUsers))\n                return Promise.resolve(user);\n            const userDb = yield this.userRepository.getById(user.id);\n            if (userDb)\n                user = userDb.update(user);\n            user = yield this.userRepository.save(user);\n            return Promise.resolve(user);\n        });\n    }\n    findUsers(args) {\n        return this.userRepository.find(args.query, { limit: args.options.limit });\n    }\n    authUser(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { form } = args;\n            const user = yield this.userRepository.getByUserNameOrEmail(form.userNameOrEmail);\n            if (!user)\n                return Promise.resolve(null);\n            const isPasswordCorrect = yield compare(form.password, user.passwordHash);\n            return Promise.resolve(isPasswordCorrect ? user : null);\n        });\n    }\n    getAuthToken(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const form = new AuthUserForm(args.form);\n            var authToken = null;\n            if (!form.isValid())\n                return Promise.resolve({\n                    authToken,\n                    user: null,\n                    errors: form.errors\n                });\n            const user = yield this.authUser(args);\n            const errors = [];\n            if (user == null)\n                errors.push(allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD);\n            else\n                authToken = encode(user, this.tokenSecret);\n            return Promise.resolve({\n                authToken,\n                user,\n                errors\n            });\n        });\n    }\n    verifyAuthToken(args) {\n        const user = decode(args.token, this.passwordSalt);\n        return Promise.resolve(user);\n    }\n    seed() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.log('seeding users', users.allUsers);\n            const authedUser = {\n                ip: '',\n                dtCreated: new Date(),\n                user: {\n                    displayName: 'Seed',\n                    id: 'ptz-user-app UserApp.seed()',\n                    email: '',\n                    userName: ''\n                }\n            };\n            users.allUsers.forEach((user) => __awaiter(this, void 0, void 0, function* () { return yield this.saveUser({ userArgs: user, authedUser }); }));\n        });\n    }\n    updatePassword(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve(false);\n        });\n    }\n    updatePasswordToken(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve(false);\n        });\n    }\n    deleteUser(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve(false);\n        });\n    }\n}\nUserApp.actions = {\n    SAVE: 'USER_APP_SAVE',\n    GET_AUTH_TOKEN: 'GET_AUTH_TOKEN'\n};\n//# sourceMappingURL=userApp.js.map"]}