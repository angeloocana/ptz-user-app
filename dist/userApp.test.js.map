{"version":3,"sources":["../dist-es6/userApp.test.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","config","authedUser","dtCreated","Date","ip","notCalled","describe","userApp","userRepository","beforeEach","returns","it","userArgs","userName","email","displayName","password","saveUser","user","passwordHash","save","calledOnce","createdBy","userNameOrEmail","authUser","form","hashPassword","errors","getAuthToken","authToken","getByUserNameOrEmail","id","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","hasError","verifyAuthToken","token","userByToken"],"mappings":"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","file":"userApp.test.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport dotenv from 'dotenv';\ndotenv.config();\nimport { contains, emptyArray, equal, notEmptyArray, notOk, ok } from 'ptz-assert';\nimport { allErrors, User } from 'ptz-user-domain';\nimport { spy, stub } from 'sinon';\nimport { UserApp } from './index';\nimport UserRepositoryFake from './UserRepositoryFake';\nconst authedUser = {\n    dtCreated: new Date(),\n    ip: '192.161.0.1'\n};\nconst notCalled = 'notCalled';\ndescribe('UserApp', () => {\n    describe('save', () => {\n        var userApp, userRepository;\n        beforeEach(() => {\n            userRepository = new UserRepositoryFake(null);\n            spy(userRepository, 'save');\n            stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\n            userApp = new UserApp({ userRepository });\n        });\n        it('hash password', () => __awaiter(this, void 0, void 0, function* () {\n            const userArgs = {\n                userName: 'angeloocana',\n                email: 'angeloocana@gmail.com',\n                displayName: 'Ângelo Ocanã',\n                password: 'testPassword'\n            };\n            const user = yield userApp.saveUser({ userArgs, authedUser });\n            ok(user.passwordHash, 'passwordHash not set');\n            notOk(user.password, 'password not empty');\n        }));\n        it('do not call repository if user is invalid', () => __awaiter(this, void 0, void 0, function* () {\n            const userArgs = {\n                userName: '',\n                email: '',\n                displayName: ''\n            };\n            yield userApp.saveUser({ userArgs, authedUser });\n            ok(userRepository.save[notCalled]);\n        }));\n        it('call repository if User is valid', () => __awaiter(this, void 0, void 0, function* () {\n            const userArgs = {\n                userName: 'angeloocana',\n                email: 'angeloocana@gmail.com',\n                displayName: 'Angelo Ocana'\n            };\n            yield userApp.saveUser({ userArgs, authedUser });\n            const calledOnce = 'calledOnce';\n            ok(userRepository.save[calledOnce]);\n        }));\n        it('set createdBy', () => __awaiter(this, void 0, void 0, function* () {\n            const userArgs = {\n                userName: 'angeloocana',\n                email: 'angeloocana@gmail.com',\n                displayName: ''\n            };\n            const user = yield userApp.saveUser({ userArgs, authedUser });\n            equal(user.createdBy, authedUser);\n        }));\n    });\n    describe('authUser', () => {\n        var userApp, userRepository;\n        beforeEach(() => {\n            userRepository = new UserRepositoryFake(null);\n            userApp = new UserApp({ userRepository });\n        });\n        it('return null when User not found', () => __awaiter(this, void 0, void 0, function* () {\n            const userNameOrEmail = 'angeloocana', password = 'teste';\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\n            const user = yield userApp.authUser({\n                form: { userNameOrEmail, password },\n                authedUser\n            });\n            notOk(user);\n        }));\n        it('return null when User found but incorrect password', () => __awaiter(this, void 0, void 0, function* () {\n            const password = 'testeteste';\n            var user = new User({\n                userName: 'angeloocana',\n                email: '',\n                displayName: '',\n                password\n            });\n            user = yield userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            user = yield userApp.authUser({\n                form: {\n                    userNameOrEmail: user.userName,\n                    password: 'incorrectPassword'\n                },\n                authedUser\n            });\n            notOk(user);\n        }));\n        it('return user when correct password', () => __awaiter(this, void 0, void 0, function* () {\n            const password = 'testeteste';\n            var user = new User({\n                userName: 'angeloocana',\n                email: 'alanmarcell@live.com',\n                displayName: 'Angelo Ocana',\n                password\n            });\n            user = yield userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            user = yield userApp.authUser({\n                form: {\n                    userNameOrEmail: user.userName,\n                    password\n                },\n                authedUser\n            });\n            ok(user);\n            emptyArray(user.errors);\n        }));\n    });\n    describe('getAuthToken', () => {\n        it('add errors when invalid userName or Email', () => __awaiter(this, void 0, void 0, function* () {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            spy(userRepository, 'getByUserNameOrEmail');\n            const authToken = yield userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'ln',\n                    password: 'testtest'\n                },\n                authedUser\n            });\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\n            notOk(authToken.authToken, 'Do NOT Generate token');\n            notOk(authToken.user, 'DO NOT return user');\n            notEmptyArray(authToken.errors, 'return errors');\n        }));\n        it('add error when invalid password', () => __awaiter(this, void 0, void 0, function* () {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            spy(userRepository, 'getByUserNameOrEmail');\n            const authToken = yield userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'angeloocana',\n                    password: 't'\n                },\n                authedUser\n            });\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\n            notOk(authToken.authToken, 'Do NOT Generate token');\n            notOk(authToken.user, 'DO NOT return user');\n            notEmptyArray(authToken.errors, 'return errors');\n        }));\n        it('generate token when correct password', () => __awaiter(this, void 0, void 0, function* () {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            var user = new User({\n                userName: 'lnsilva',\n                email: 'lucas.neris@globalpoints.com.br', displayName: 'Lucas Neris',\n                password: '123456'\n            });\n            user = yield userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            const authToken = yield userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            ok(authToken.authToken, 'Empty Token');\n            ok(authToken.user, 'no user');\n            ok(authToken.user.id, 'no user id');\n            emptyArray(authToken.errors, 'return errors');\n        }));\n        it('add errors when incorrect password', () => __awaiter(this, void 0, void 0, function* () {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\n            const authToken = yield userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            notOk(authToken.authToken, 'do not generate token');\n            notOk(authToken.user, 'do not return user');\n            contains(authToken.errors, allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD, 'return invalid userName, email or password error');\n        }));\n    });\n    describe('verifyAuthToken', () => {\n        var userApp, userRepository;\n        beforeEach(() => {\n            userRepository = new UserRepositoryFake(null);\n            userApp = new UserApp({ userRepository });\n        });\n        it('Invalid token throws exception', () => __awaiter(this, void 0, void 0, function* () {\n            var hasError = false;\n            try {\n                yield userApp.verifyAuthToken({\n                    token: 'Invalid_Token',\n                    authedUser\n                });\n            }\n            catch (err) {\n                hasError = true;\n            }\n            ok(hasError);\n        }));\n        it('Valid token return user', () => __awaiter(this, void 0, void 0, function* () {\n            var user = new User({\n                userName: 'lnsilva',\n                email: 'lucas.neris@globalpoints.com.br',\n                displayName: 'Lucas Neris',\n                password: '123456'\n            });\n            user = yield userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            const authToken = yield userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            ok(authToken.authToken, 'Empty Token');\n            const userByToken = yield userApp.verifyAuthToken({\n                token: authToken.authToken,\n                authedUser\n            });\n            equal(userByToken.id, user.id, 'User Id dont match');\n            equal(userByToken.email, user.email, 'User Id dont match');\n            equal(userByToken.userName, user.userName, 'User Id dont match');\n            equal(userByToken.displayName, user.displayName, 'User Id dont match');\n        }));\n    });\n});\n//# sourceMappingURL=userApp.test.js.map"]}